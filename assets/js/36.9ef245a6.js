(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{320:function(t,a,s){"use strict";s.r(a);var r=s(0),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"听着-provider"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#听着-provider"}},[t._v("#")]),t._v(" 听着 Provider")]),t._v(" "),s("p",[t._v("提供程序是Nest的基本概念。许多基本的Nest类都可以被视为提供程序-服务，存储库，工厂，帮助程序等。提供程序的主要思想是它可以注入依赖项。这意味着对象可以彼此创建各种关系，并且“连接”对象实例的功能在很大程度上可以委托给Nest运行时系统。提供者只是带有@Injectable()装饰器的类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://docs.nestjs.com/assets/Components_1.png",alt:""}})]),t._v(" "),s("p",[t._v("在上一章中，我们构建了一个简单的CatsController。控制器应处理HTTP请求，并将更复杂的任务委托给提供程序。提供程序是普通的JavaScript类，在@Injectable()其类声明之前带有装饰器。")]),t._v(" "),s("div",{staticClass:"language-tip extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("提示\n由于Nest使您有可能以一种更加面向对象的方式设计和组织依赖项，因此我们强烈建议您遵循SOLID原则。\n")])])]),s("h2",{attrs:{id:"服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务"}},[t._v("#")]),t._v(" 服务")]),t._v(" "),s("h2",{attrs:{id:"依赖注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#依赖注入"}},[t._v("#")]),t._v(" 依赖注入")]),t._v(" "),s("h2",{attrs:{id:"范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#范围"}},[t._v("#")]),t._v(" 范围")]),t._v(" "),s("h2",{attrs:{id:"自定义提供商"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义提供商"}},[t._v("#")]),t._v(" 自定义提供商")]),t._v(" "),s("h2",{attrs:{id:"可选供应商"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可选供应商"}},[t._v("#")]),t._v(" 可选供应商")]),t._v(" "),s("h2",{attrs:{id:"基于属性的注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于属性的注入"}},[t._v("#")]),t._v(" 基于属性的注入")]),t._v(" "),s("h2",{attrs:{id:"提供商注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提供商注入"}},[t._v("#")]),t._v(" 提供商注入")]),t._v(" "),s("h2",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=e.exports}}]);