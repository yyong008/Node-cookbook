(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{339:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"请求生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求生命周期"}},[t._v("#")]),t._v(" 请求生命周期")]),t._v(" "),a("p",[t._v("Nest应用程序按我们称为请求生命周期的顺序处理请求并产生响应。通过使用中间件，管道，防护和拦截器，跟踪在请求生命周期中特定代码在何处执行可能是具有挑战性的，尤其是在全局，控制器级别和路由级别组件开始发挥作用时。通常，请求通过中间件流向警卫人员，然后流向拦截器，然后流向管道，最后流回到返回路径上的拦截器（因为生成了响应）。")]),t._v(" "),a("h2",{attrs:{id:"中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[t._v("#")]),t._v(" 中间件")]),t._v(" "),a("p",[t._v("中间件按特定顺序执行。首先，Nest运行全局绑定的中间件（例如与绑定的中间件app.use），然后运行模块绑定的中间件，该中间件在路径上确定。中间件按照它们绑定的顺序顺序运行，类似于Express中的中间件工作方式。")]),t._v(" "),a("h2",{attrs:{id:"卫兵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#卫兵"}},[t._v("#")]),t._v(" 卫兵")]),t._v(" "),a("p",[t._v("后卫的执行从全局后卫开始，然后进行到控制器后卫，最后到路由后卫。与中间件一样，警卫按绑定的顺序运行。例如：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseGuards")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Guard1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Guard2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Controller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cats'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CatsController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" catsService"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CatsService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UseGuards")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Guard3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCats")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cats"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCats")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Guard1将在之前执行，Guard2并且都将在之前执行Guard3。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("提示\n当谈论全局绑定vs控制器或局部绑定时，区别在于防护（或其他组件）的绑定位置。如果您app.useGlobalGuard()通过模块使用或提供组件，则它是全局绑定的。否则，如果装饰器位于控制器类之前，则绑定到控制器；如果装饰器进行路由声明，则绑定到路由。")])]),t._v(" "),a("h2",{attrs:{id:"拦截"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拦截"}},[t._v("#")]),t._v(" 拦截")]),t._v(" "),a("p",[t._v("拦截器在大多数情况下遵循与警卫相同的模式，但有一个陷阱：拦截器返回RxJS Observables时，将以先进先出的方式解析可观察对象。因此，入站请求将通过标准的全局，控制器，路由级别解析，但是请求的响应端（即，从控制器方法处理程序返回后）将从路由到控制器再到全局解析。同样，管道，控制器或服务抛出的任何错误都可以在catchError拦截器的操作员中读取。")]),t._v(" "),a("h2",{attrs:{id:"管道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[t._v("#")]),t._v(" 管道")]),t._v(" "),a("p",[t._v("管道遵循全局标准到控制器来路由绑定序列，就@usePipes()参数而言，先进先出相同。但是，在路由参数级别，如果有多个管道在运行，它们将按照最后一个参数的顺序运行，而第一个管道到第一个管道。这也适用于路由级别和控制器级别的管道。例如，如果我们有以下控制器：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UsePipes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GeneralValidationPipe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Controller")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cats'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CatsController")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" catsService"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" CatsService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("UsePipes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("RouteSpecificPipe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Patch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("':id'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateCat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Body")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" body"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateCatDTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Param")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateCatParams"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    @"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" query"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateCatQuery"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("catsService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateCat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后GeneralValidationPipe会query先针对params，，和body对象运行，然后再按RouteSpecificPipe顺序进行操作。如果有任何特定于参数的管道，它们将在控制器和路由级别管道之后运行（同样，从最后一个参数到第一个参数）。")]),t._v(" "),a("h2",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),a("p",[t._v("过滤器是唯一不能全局优先解析的组件。取而代之的是，过滤器从可能的最低级别开始解析，这意味着执行从任何路由绑定的过滤器开始，然后继续到控制器级别，最后到全局过滤器。请注意，不能在过滤器之间传递异常。如果路由级别过滤器捕获到异常，则控制器或全局级别过滤器无法捕获相同的异常。实现这种效果的唯一方法是在过滤器之间使用继承。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("提示\n过滤器仅在请求过程中发生任何未捕获的异常时执行。捕获的异常（例如用捕获的异常）try/catch不会触发异常过滤器触发。一旦遇到未捕获的异常，生命周期的其余部分将被忽略，并且请求将直接跳到过滤器。")])]),t._v(" "),a("h2",{attrs:{id:"摘要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#摘要"}},[t._v("#")]),t._v(" 摘要")]),t._v(" "),a("p",[t._v("通常，请求生命周期如下所示：")]),t._v(" "),a("ul",[a("li",[t._v("传入请求")]),t._v(" "),a("li",[t._v("全局绑定的中间件")]),t._v(" "),a("li",[t._v("模块绑定中间件")]),t._v(" "),a("li",[t._v("全球卫队")]),t._v(" "),a("li",[t._v("控制器后卫")]),t._v(" "),a("li",[t._v("路线守卫")]),t._v(" "),a("li",[t._v("全局拦截器（预控制器）")]),t._v(" "),a("li",[t._v("控制器拦截器（预控制器）")]),t._v(" "),a("li",[t._v("路由拦截器（预控制器）")]),t._v(" "),a("li",[t._v("全球管道")]),t._v(" "),a("li",[t._v("控制器管道")]),t._v(" "),a("li",[t._v("管路")]),t._v(" "),a("li",[t._v("路径参数管道")]),t._v(" "),a("li",[t._v("控制器（方法处理程序）")]),t._v(" "),a("li",[t._v("服务（如果存在）")]),t._v(" "),a("li",[t._v("路由拦截器（请求后）")]),t._v(" "),a("li",[t._v("控制器拦截器（请求后）")]),t._v(" "),a("li",[t._v("全局拦截器（请求后）")]),t._v(" "),a("li",[t._v("异常过滤器（路由，然后是控制器，然后是全局）")]),t._v(" "),a("li",[t._v("服务器响应")])])])}),[],!1,null,null,null);s.default=r.exports}}]);