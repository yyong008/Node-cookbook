(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{326:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"异常过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常过滤器"}},[t._v("#")]),t._v(" 异常过滤器")]),t._v(" "),a("p",[t._v("Nest 带有内置的异常层，该层负责处理应用程序中所有异常处理。当您的应用程序代码发生异常时，该层捕获该异常，然后自动发送适当的用户友好响应。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://docs.nestjs.com/assets/Filter_1.png",alt:""}})]),t._v(" "),a("p",[t._v("开箱即用，此操作由内置的全局异常过滤器执行，该过滤器处理类型 HttpException （及其子类）的异常。如果无法识别异常（既不 HttpException 是继承自的类也不是 HttpException），则内置异常过滤器会生成一下默认的 JSON 响应:")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"statusCode"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Internal server error"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"抛出标准异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抛出标准异常"}},[t._v("#")]),t._v(" 抛出标准异常")]),t._v(" "),a("p",[t._v("Nest 提供了一个内置 HttpException 类， 从 "),a("code",[t._v("@nestjs/common")]),t._v("包中公开。对于典型的基于 HTTP REST/GraphQL API的应用程序，最佳实践是发生错误情时发送 HTTP 响应对象。")]),t._v(" "),a("p",[t._v("例如，在中CatsController，我们有一个findAll()方法（GET路由处理程序）。假设此路由处理程序由于某种原因引发异常。为了说明这一点，我们将对其进行如下硬编码：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fileAdd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Forbidden'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HttpException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("我们在HttpStatus这里使用了。这是从@nestjs/common包中导入的帮助程序枚举。")])]),t._v(" "),a("p",[t._v("当客户端调用此端点时，响应如下所示：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"statusCode"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"message"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Forbidden"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("该HttpException构造函数有两个参数，其确定响应：")]),t._v(" "),a("p",[t._v("该response参数定义JSON响应体。可以是a string 或a object，如下所述。\n该status参数定义了HTTP状态代码。\n默认情况下，JSON响应主体包含两个属性：")]),t._v(" "),a("p",[t._v("statusCode：默认为status参数中提供的HTTP状态代码\nmessage：基于的HTTP错误的简短描述 status\n要仅覆盖JSON响应主体的消息部分，请在response参数中提供一个字符串。要覆盖整个JSON响应主体，请在response参数中传递一个对象。Nest将序列化对象，并将其作为JSON响应正文返回。")]),t._v(" "),a("p",[t._v("第二个构造函数参数-- status应该是有效的HTTP状态代码。最佳做法是使用从HttpStatus导入的枚举@nestjs/common。")]),t._v(" "),a("p",[t._v("这是一个覆盖整个响应正文的示例：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    status"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" HttpStatus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    error"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is a custom message'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HttpStatus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("使用上面的代码，响应如下所示：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"status"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("403")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a custom message"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"自定义异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[t._v("#")]),t._v(" 自定义异常")]),t._v(" "),a("p",[t._v("在许多情况下，您将不需要编写自定义异常，而可以使用内置的Nest HTTP异常，如下一节所述。如果确实需要创建自定义的异常，则最好创建自己的异常层次结构，其中自定义异常从基HttpException类继承。使用这种方法，Nest可以识别您的异常，并自动处理错误响应。让我们实现这样一个自定义异常：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForbiddenException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Forbidden'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" HttpStatus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FORBIDDEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于ForbiddenException扩展了base HttpException，它将与内置的异常处理程序无缝地一起工作，因此我们可以在findAll()方法内部使用它。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("@"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ForbiddenException")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"内置的-http-例外"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内置的-http-例外"}},[t._v("#")]),t._v(" 内置的 HTTP 例外")]),t._v(" "),a("p",[t._v("Nest提供了一组从base继承的标准异常HttpException。这些是从@nestjs/common程序包中公开的，它们代表许多最常见的HTTP异常：")]),t._v(" "),a("ul",[a("li",[t._v("BadRequestException")]),t._v(" "),a("li",[t._v("UnauthorizedException")]),t._v(" "),a("li",[t._v("NotFoundException")]),t._v(" "),a("li",[t._v("ForbiddenException")]),t._v(" "),a("li",[t._v("NotAcceptableException")]),t._v(" "),a("li",[t._v("RequestTimeoutException")]),t._v(" "),a("li",[t._v("ConflictException")]),t._v(" "),a("li",[t._v("GoneException")]),t._v(" "),a("li",[t._v("PayloadTooLargeException")]),t._v(" "),a("li",[t._v("UnsupportedMediaTypeException")]),t._v(" "),a("li",[t._v("UnprocessableEntityException")]),t._v(" "),a("li",[t._v("InternalServerErrorException")]),t._v(" "),a("li",[t._v("NotImplementedException")]),t._v(" "),a("li",[t._v("ImATeapotException")]),t._v(" "),a("li",[t._v("MethodNotAllowedException")]),t._v(" "),a("li",[t._v("BadGatewayException")]),t._v(" "),a("li",[t._v("ServiceUnavailableException")]),t._v(" "),a("li",[t._v("GatewayTimeoutException")])]),t._v(" "),a("h2",{attrs:{id:"异常过滤器-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常过滤器-2"}},[t._v("#")]),t._v(" 异常过滤器")]),t._v(" "),a("p",[t._v("虽然基本（内置）异常过滤器可以为您自动处理许多情况，但您可能希望完全控制异常层。例如，您可能要添加日志记录或基于一些动态因素使用其他JSON模式。异常过滤器正是为此目的而设计的。它们使您可以控制精确的控制流以及将响应的内容发送回客户端。")]),t._v(" "),a("p",[t._v("让我们创建一个异常过滤器，该过滤器负责捕获作为HttpException类实例的异常，并为其实现自定义响应逻辑。为此，我们需要访问基础平台Request和Response对象。我们将访问该Request对象，以便我们可以取出原始对象url并将其包含在日志记录信息中。我们将使用方法使用Response对象来直接控制发送的响应response.json()。")])])}),[],!1,null,null,null);s.default=e.exports}}]);