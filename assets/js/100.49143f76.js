(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{379:function(t,e,a){"use strict";a.r(e);var s=a(0),l=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"总览-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总览-overview"}},[t._v("#")]),t._v(" 总览 Overview")]),t._v(" "),a("p",[t._v("该NestCLI是一个命令行界面工具，可以帮助你进行初始化，开发和维护你的巢的应用程序。它以多种方式提供帮助，包括搭建项目，以开发模式提供服务以及构建和捆绑用于生产分配的应用程序。它体现了最佳实践的架构模式，以鼓励结构良好的应用程序。")]),t._v(" "),a("h2",{attrs:{id:"安装-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-installation"}},[t._v("#")]),t._v(" 安装 => Installation")]),t._v(" "),a("p",[t._v("注意：在本指南中，我们描述使用npm来安装软件包，包括Nest CLI。您可以自行决定使用其他软件包管理器。使用npm，您可以使用多个选项来管理OS命令行如何解析nestCLI二进制文件的位置。在这里，我们描述了nest使用-g选项全局安装二进制文件。这提供了一定的便利，这是我们在整个文档中都采用的方法。请注意，在全球范围内安装任何npm软件包都应负责确保它们正在为用户运行正确的版本。这也意味着，如果您有不同的项目，则每个项目都将运行相同版本的CLI。合理的替代方法是使用npx程序（或其他软件包管理器的类似功能），以确保您运行Nest CLI 的托管版本。我们建议您查阅npx文档和/或DevOps支持人员以获取更多信息。")]),t._v(" "),a("p",[t._v("使用npm install -g命令在全局安装CLI （有关全局安装的详细信息，请参阅上面的注释）。")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g @nestjs/cli\n")])])]),a("h2",{attrs:{id:"基本工作流-basic-workflow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本工作流-basic-workflow"}},[t._v("#")]),t._v(" 基本工作流 => Basic workflow")]),t._v(" "),a("p",[t._v("安装后，您可以直接通过nest可执行文件从OS命令行调用CLI命令。nest输入以下内容，查看可用的命令：")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[t._v("$ nest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("help\n")])])]),a("p",[t._v("使用以下结构获取有关单个命令的帮助。替换任何命令（例如new，add等），在generate下面的示例中可以看到该命令的详细帮助：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ nest generate --help\n")])])]),a("p",[t._v("要在开发模式下创建，构建和运行新的基本Nest项目，请转到应该是新项目的父文件夹，然后运行以下命令：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ nest new my-nest-project\n$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" my-nest-project\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run start:dev\n")])])]),a("p",[t._v("在浏览器中，打开http：// localhost：3000以查看新应用程序正在运行。当您更改任何源文件时，该应用程序将自动重新编译并重新加载。")]),t._v(" "),a("h2",{attrs:{id:"项目结构-project-structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目结构-project-structure"}},[t._v("#")]),t._v(" 项目结构 => Project structure")]),t._v(" "),a("p",[t._v("运行时nest new，Nest通过创建新文件夹并填充一组初始文件来生成样板应用程序结构。您可以继续使用此默认结构，添加新组件，如本文档中所述。我们将通过生成的项目结构nest new称为标准模式。Nest还支持一种用于管理多个项目和库的备用结构，称为Monorepo模式。")]),t._v(" "),a("p",[t._v("除了围绕构建过程如何工作的一些特定考虑因素（基本上，monorepo模式简化了有时可能由于monorepo样式的项目结构而引起的构建复杂性），内置库支持，其余的Nest功能以及本文档之后，同样适用于标准模式和monorepo模式的项目结构。实际上，您将来可以随时轻松地从标准模式切换到Monorepo模式，因此您可以在仍然了解Nest的同时安全地推迟此决定。")]),t._v(" "),a("p",[t._v("您可以使用任何一种模式来管理多个项目。以下是这些差异的简要摘要：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("特征")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("标准模式")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Monorepo模式")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("多个项目")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单独的文件系统结构")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单文件系统结构")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("node_modules和package.json")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单独的实例")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("跨 Monorepo共享")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("默认编译器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("tsc")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("网络包")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("编译器设定")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单独设定")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("每个项目可以覆盖的Monorepo默认值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("配置文件，如tslint.json，.prettierrc等。")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单独设定")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("跨Monorepo共享")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("nest build和nest start命令")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("目标自动默认为上下文中的（仅）项目")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("目标默认为monorepo中的默认项目")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("图书馆")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("手动管理，通常通过npm打包")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("内置支持，包括路径管理和捆绑")])])])]),t._v(" "),a("p",[t._v("阅读有关工作区和库的部分，以获取更多详细信息，以帮助您确定最适合您的模式。")]),t._v(" "),a("h2",{attrs:{id:"cli-命令参数-cli-command-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cli-命令参数-cli-command-syntax"}},[t._v("#")]),t._v(" CLI 命令参数 => CLI  command syntax")]),t._v(" "),a("p",[t._v("所有nest命令都遵循相同的格式：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("nest commandOrAlias requiredArg "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("optionalArg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("例如：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ nest new my-nest-project --dry-run\n")])])]),a("p",[t._v("这new是commandOrAlias。该new命令的别名为n。my-nest-project是requiredArg。如果命令行上未提供requiredArg，nest则将提示您输入。而且，--dry-run具有等效的简写形式-d。考虑到这一点，以下命令与上面的命令等效：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ nest n my-nest-project -d\n")])])]),a("p",[t._v("大多数命令以及某些选项都具有别名。尝试运行nest new --help以查看这些选项和别名，并确认您对上述结构的理解。")]),t._v(" "),a("h2",{attrs:{id:"命令概览-command-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令概览-command-overview"}},[t._v("#")]),t._v(" 命令概览 => Command overview")]),t._v(" "),a("p",[t._v("运行"),a("code",[t._v("nest <command> --help")]),t._v("以下任何命令以查看特定于命令的选项。")]),t._v(" "),a("p",[t._v("有关每个命令的详细说明，请参见用法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("命令")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("别名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("new")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("n")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("脚手架具有运行所需的所有样板文件的新标准模式应用程序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("generate")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("g")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("根据原理图生成和/或修改文件。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("build")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将应用程序或工作空间编译到输出文件夹中。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("start")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("编译并运行应用程序（或工作空间中的默认项目）。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("add")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("导入已打包为嵌套库的库，并运行其安装原理图。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("update")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("u")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v('@nestjs将package.json"dependencies"列表中的依赖项更新为其@latest版本。')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("info")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("i")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("显示有关已安装的嵌套软件包的信息以及其他有用的系统信息。")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);